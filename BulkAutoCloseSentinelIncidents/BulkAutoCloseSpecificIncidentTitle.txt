# Configuration
$config = @{
    ResourceGroupName  = "<Resource_Group_Name(Sentinel one)>"
    WorkspaceName      = "<Log_Analyitcs_Workspace_ID>"
    SubscriptionId     = "<Subscription ID>"
    PageSize           = 100
    RetryAttempts      = 2
    DelayBetweenCalls  = 2
    CloseMode          = "All"     # Options: "All", "Title", "Severity"
    TargetTitle        = "<Insert Title of the Incident>"
    TargetSeverity     = "High"    # Used if CloseMode = "Severity"
    Verbose            = $true
}

$totalClosed = 0
$failedIncidents = [System.Collections.Generic.List[string]]::new()

function Close-Incidents {
    $continue = $true
    $nextLink = $null

    while ($continue) {
        try {
            $incidents = if ($nextLink) {
                Get-AzSentinelIncident -NextLink $nextLink
            } else {
                Get-AzSentinelIncident -ResourceGroupName $config.ResourceGroupName `
                                        -WorkspaceName $config.WorkspaceName `
                                        -Filter "properties/status eq 'New'" `
                                        -Top $config.PageSize
            }

            if (-not $incidents -or $incidents.Count -eq 0) {
                $continue = $false
                break
            }

            $nextLink = $incidents.NextLink

            foreach ($incident in $incidents) {
                $shouldClose = switch ($config.CloseMode) {
                    "All"      { $true }
                    "Title"    { $incident.Title -eq $config.TargetTitle }
                    "Severity" { $incident.Severity -eq $config.TargetSeverity }
                    default    { $false }
                }

                if (-not $shouldClose) { continue }

                $retryCount = 0
                $closed = $false

                while ($retryCount -lt $config.RetryAttempts -and -not $closed) {
                    try {
                        Update-AzSentinelIncident -Id $incident.Name `
                            -ResourceGroupName $config.ResourceGroupName `
                            -WorkspaceName $config.WorkspaceName `
                            -SubscriptionId $config.SubscriptionId `
                            -Status Closed `
                            -Confirm:$false `
                            -Severity $incident.Severity `
                            -Classification Undetermined `
                            -Title $incident.Title `
                            -ErrorAction Stop

                        $script:totalClosed++
                        $closed = $true
                        if ($config.Verbose) { Write-Host "Closed incident: $($incident.Name) - $($incident.Title)" -ForegroundColor Green }
                    } catch {
                        $retryCount++
                        if ($retryCount -ge $config.RetryAttempts) {
                            $script:failedIncidents.Add($incident.Name)
                            Write-Host "Failed to close incident: $($incident.Name) - $($_.Exception.Message)" -ForegroundColor Red
                        }
                        Start-Sleep -Milliseconds 500
                    }
                }
            }

            Write-Host "Processed $($incidents.Count) incidents | Total closed so far: $totalClosed"

            Start-Sleep -Seconds $config.DelayBetweenCalls

        } catch {
            Write-Host "Error processing batch: $_" -ForegroundColor Red
            $continue = $false
        }
    }
}

# Main Execution
Write-Host "Starting incident closure process..." -ForegroundColor Cyan
Write-Host "Close Mode: $($config.CloseMode)" -ForegroundColor Yellow
if ($config.CloseMode -eq "Title") { Write-Host "Target Title: $($config.TargetTitle)" }
if ($config.CloseMode -eq "Severity") { Write-Host "Target Severity: $($config.TargetSeverity)" }

Close-Incidents

# Results
Write-Host @"
============================================
Incident closure process completed
Total incidents closed: $totalClosed
Failed to close: $($failedIncidents.Count)
============================================
"@ -ForegroundColor Cyan

if ($failedIncidents.Count -gt 0) {
    Write-Host "Failed incident IDs:" -ForegroundColor Yellow
    $failedIncidents | ForEach-Object { Write-Host "- $_" }
}

Write-Host "Process completed at $(Get-Date)" -ForegroundColor Cyan
